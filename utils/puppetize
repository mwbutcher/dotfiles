#!/usr/bin/env python
# encoding: utf-8

import urllib
import re
import sys
import os

from subprocess import call

base_url = "http://puppet-vagrant-boxes.puppetlabs.com"

base_vagrant_file = """# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "%(name)s-%(arch)s"
  config.vm.box_url = "%(url)s"

  config.vm.provider "virtualbox" do |vm|
    vm.name = "%(name)s"
  end

  # config.vm.network "public_network"
end
"""

vagrant_providers = [
    "virtualbox",
    "vmware_fusion",
]


def main():
    """
    Helper script to create vagrant boxes on the fly
    """

    if os.path.isfile("./VagrantFile"):
        print "A VagrantFile already exists in this directory!"
        exit(4)

    selection = [
        'os',
        'name',
        'arch',
        'url',
    ]

    matches = []

    # Scrape Puppet Labs page for boxes
    box_regex = re.compile(
        "<td>([a-zA-Z ]+)</td>\n\s*<td>([a-zA-Z0-9\.\-]+)"
        "</td>\n\s*<td>([a-zA-Z0-9\-\.]+)</td>\n\s*<td>"
        "([a-zA-Z0-9 \.\-]+)</td>\n\s*"
        "<td><a href=\"([a-zA-Z0-9\.\-]+)\">plain</a></td>\n"
        "\s*<td><a href=\"([a-zA-Z0-9\.\-]+)\">nocm</a></td>",
        re.DOTALL)

    contents = urllib.urlopen(base_url).read()
    boxes = re.findall(box_regex, contents)
    puppet_matches = []
    for match in boxes:
        puppet_matches.append(
            {
                'name': ' '.join(match[0:2]),
                'os': match[0],
                'version': match[1],
                'arch': match[2],
                'provider': match[3],
                'url': base_url + "/%s" % match[4],
            }
        )
        puppet_matches.append(
            {
                'name': ' '.join(match[0:2]) + " - nocm",
                'os': match[0],
                'version': match[1],
                'arch': match[2],
                'provider': match[3],
                'url': base_url + "/%s" % match[5],
            }
        )

    #matches += puppet_matches

    # Scrape http://vagrantbox.es/ vagrant boxes

    box_regex = re.compile(
        "<tr>\n\s*<td>(.*)</td>\n\s*"
        "<td>(.*)</td>\n\s*"
        "<td>(.*)</td>\n\s*"
        "<td>(.*)</td>\n\s*"
        "</tr>"
    )

    oses = [
        "Arch",
        "CentOS",
        "Debian",
        "Fedora",
        "FreeBSD",
        "Funtoo",
        "Gentoo",
        "Heroku",
        "Windows",
        "OmniOS",
        "OpenBSD",
        "OpenSuse",
        "Oracle",
        "SLES",
        "Scientific",
        "Slackware",
        "Solaris",
        "Ubuntu",
        "openSUSE",
    ]

    contents = urllib.urlopen("http://www.vagrantbox.es/").read()
    boxes = re.findall(box_regex, contents)
    boxes_matches = []
    ARCH_64BIT = re.compile(
        "x?64|x?86_64", re.IGNORECASE
    )
    ARCH_32BIT = re.compile(
        "i?386|32", re.IGNORECASE
    )
    for match in boxes:
        name = match[0]
        operating_system = None
        for x in oses:
            if x in name:
                operating_system = x
                break
        arch = None
        if re.search(ARCH_64BIT, match[0]):
            arch = "x64"
        elif re.search(ARCH_32BIT, match[0]):
            arch = "i386"

        if all([operating_system, arch]):
            boxes_matches.append(
                {
                    'name': match[0],
                    'os': operating_system,
                    'version': None,
                    'arch': arch,
                    'provider': match[1],
                    'url': match[2],
                }
            )

    matches += boxes_matches
    print matches

    # Filter out non-virtualbox providers

    matches = filter_list(matches, provider='virtualbox')

    for name in sys.argv[1:]:
        matches = filter_list(matches, all=name)

    for select_filter in selection:

        if not matches:
            print "Unable to find matching box."
            exit(1)
        elif len(matches[0]) == 1:
            print "Match found"
            exit(0)

        unique = list(set([x[select_filter] for x in matches]))
        unique = sorted(unique)
        if not len(unique) == 1:
            print "\nSelect %s:" % select_filter
            print "\n".join(["\t %d ) %s" % (
                x[0] + 1, x[1]
            ) for x in enumerate(unique)])
            try:
                selection = raw_input()
                if selection.isdigit():
                    selection = unique[int(selection) - 1]
            except Exception:
                print "Invalid selection"
                exit(1)
            matches = filter_list(matches, **{select_filter: selection})

    if not len(matches) == 1:
        print "Unable to determine box."
        exit(2)
    output = base_vagrant_file % matches[0]
    print output
    exit(0)
    f = open('./VagrantFile', 'w')
    f.write(output)
    f.close()

    # Start Vagrant Box
    #call(['vagrant', 'up'])
    #call(['vagrant', 'ssh'])


def filter_list(l, **kwargs):
    final_list = []
    if 'all' in kwargs:
        v = kwargs['all']
        for item in l:
            for key in item:
                if item[key] and re.search(re.compile(v, re.IGNORECASE), item[key]):
                    final_list.append(item)
        return final_list
    for k, v in kwargs.items():
        for item in l:
            if k in item and item[k] and v.lower() in item[k].lower():
                final_list.append(item)
    final_list = list({x['url']: x for x in final_list}.values())
    return final_list

if __name__ == '__main__':
    main()
